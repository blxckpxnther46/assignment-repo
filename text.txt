The Commands

git init: This command creates a new, empty Git repository in your current folder. It's the starting point for any new project you want to track with Git.
git add: This command stages files, which means you are telling Git which changes you want to include in your next save (commit).
git commit -m "message": This command saves a snapshot of your staged files to the repository's history. The message inside the quotes is a short description of the changes you made.
git status: A helpful command that shows you the current state of your project. It tells you which files have been changed, which are staged, and which are untracked.
git branch: This command lets you manage branches. Branches are like parallel timelines for your project, allowing you to work on new features or bug fixes without affecting the main version.
git checkout: This command is used to switch from one branch to another.
git merge: This command combines the changes from one branch into another, bringing a feature or fix back into your main project.
git push: This command uploads your saved changes (commits) to a remote repository, like one hosted on GitHub. This shares your work with others and backs it up online.
git pull: This command downloads and integrates changes from the remote repository to your local copy, ensuring you have the latest version of the project.

Git Workflow

Create a new repository:
Use git init to set up your project for version control.

Add a basic text file (.txt):
Create your file, then use git add to prepare it for your first commit.

Make commits with meaningful messages:
Use git commit -m "Initial commit" to save your first file. As you make more changes, use this command to save your progress with clear, descriptive messages.

Create and switch branches:
Use git branch <new-branch-name> to create a new branch. Then, use git checkout <new-branch-name> to move to it and work on new changes.

Make changes and merge branches:
After making your changes and committing them on the new branch, use git checkout main to switch back to the main branch. Then, use git merge <new-branch-name> to bring your changes back to the main timeline.

Push to remote repository:
Once your changes are merged into the main branch, use git push to upload your work to the remote repository.